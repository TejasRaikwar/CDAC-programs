import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class Account {
    private static long baseAccntNo = 65430;
    private final long accNo;
    private String accName;
    private final LocalDate dateOfOpening;
    private double balance;

    public Account(String accName, double balance) {
        this.accNo = generateAccountNumber();
        setAccName(accName);
        this.dateOfOpening = LocalDate.now(); // Automatically set to current date
        setBalance(balance);
    }

    private static synchronized long generateAccountNumber() {
        return baseAccntNo++;
    }

    // Getters
    public long getAccNo() {
        return accNo;
    }

    public String getAccName() {
        return accName;
    }

    public LocalDate getDateOfOpening() {
        return dateOfOpening;
    }

    public double getBalance() {
        return balance;
    }

    // Setters with validations
    public void setAccName(String accName) {
        if (accName == null || accName.trim().isEmpty()) {
            throw new IllegalArgumentException("Account name cannot be empty");
        }
        this.accName = accName.trim();
    }

    public void setBalance(double balance) {
        if (balance <= 1000) {
            throw new IllegalArgumentException("Balance must be more than 1000");
        }
        this.balance = balance;
    }

    @Override
    public String toString() {
        return String.format("Account No: %d, Name: %-15s, Opening Date: %s, Balance: %,.2f",
                accNo, accName, dateOfOpening, balance);
    }
}

public class AccountManagementSystem {
    private static final List<Account> accounts = new ArrayList<>();
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("=== Account Management System ===");

        while (true) {
            try {
                printMenu();
                int choice = getIntInput("Enter your choice (1-7): ");

                switch (choice) {
                    case 1 -> addAccount();
                    case 2 -> printAllAccounts();
                    case 3 -> sortByAccountNoDesc();
                    case 4 -> sortByAccName();
                    case 5 -> sortByDateOfOpening();
                    case 6 -> sortByBalanceDesc();
                    case 7 -> {
                        System.out.println("Exiting the program. Goodbye!");
                        System.exit(0);
                    }
                    default -> System.out.println("Invalid choice. Please enter 1-7.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void printMenu() {
        System.out.println("\nMenu:");
        System.out.println("1. Add account");
        System.out.println("2. Print all accounts");
        System.out.println("3. Sort by account no (descending)");
        System.out.println("4. Sort by account name");
        System.out.println("5. Sort by date of opening");
        System.out.println("6. Sort by balance (descending)");
        System.out.println("7. Exit");
    }

    private static void addAccount() {
        try {
            String accName = getStringInput("Enter account holder name: ");
            double balance = getDoubleInput("Enter initial balance (>1000): ");

            Account account = new Account(accName, balance);
            accounts.add(account);
            System.out.println("Account created successfully!");
            System.out.println(account);
        } catch (IllegalArgumentException e) {
            System.out.println("Account creation failed: " + e.getMessage());
        }
    }

    private static void printAllAccounts() {
        if (accounts.isEmpty()) {
            System.out.println("No accounts available.");
            return;
        }

        System.out.println("\nAll Accounts:");
        System.out.println("----------------------------------------------------------------");
        System.out.printf("%-12s %-20s %-15s %12s%n", "Account No", "Name", "Opening Date", "Balance");
        System.out.println("----------------------------------------------------------------");
        
        for (Account account : accounts) {
            System.out.printf("%-12d %-20s %-15s %,12.2f%n",
                    account.getAccNo(),
                    account.getAccName(),
                    account.getDateOfOpening(),
                    account.getBalance());
        }
    }

    private static void sortByAccountNoDesc() {
        accounts.sort(Comparator.comparingLong(Account::getAccNo).reversed());
        System.out.println("\nAccounts sorted by account number (descending):");
        printAllAccounts();
    }

    private static void sortByAccName() {
        accounts.sort(Comparator.comparing(Account::getAccName));
        System.out.println("\nAccounts sorted by account name:");
        printAllAccounts();
    }

    private static void sortByDateOfOpening() {
        accounts.sort(Comparator.comparing(Account::getDateOfOpening));
        System.out.println("\nAccounts sorted by opening date:");
        printAllAccounts();
    }

    private static void sortByBalanceDesc() {
        accounts.sort(Comparator.comparingDouble(Account::getBalance).reversed());
        System.out.println("\nAccounts sorted by balance (descending):");
        printAllAccounts();
    }

    // Helper methods for input with validation
    private static int getIntInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid integer.");
            }
        }
    }

    private static double getDoubleInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                double value = Double.parseDouble(scanner.nextLine());
                if (value <= 1000) {
                    System.out.println("Balance must be greater than 1000. Please try again.");
                    continue;
                }
                return value;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }
    }

    private static String getStringInput(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine().trim();
            if (!input.isEmpty()) {
                return input;
            }
            System.out.println("Input cannot be empty. Please try again.");
        }
    }
}